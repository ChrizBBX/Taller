// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Taller.Entities.Entities;

#nullable disable

namespace Taller.DataAccess.Context
{
    public partial class TallerContext : DbContext
    {
        public TallerContext()
        {
        }

        public TallerContext(DbContextOptions<TallerContext> options)
            : base(options)
        {
        }

        public virtual DbSet<tbClientePorVehiculo> tbClientePorVehiculo { get; set; }
        public virtual DbSet<tbClientes> tbClientes { get; set; }
        public virtual DbSet<tbCompras> tbCompras { get; set; }
        public virtual DbSet<tbDepartamentos> tbDepartamentos { get; set; }
        public virtual DbSet<tbDetallesCompras> tbDetallesCompras { get; set; }
        public virtual DbSet<tbDetallesventas> tbDetallesventas { get; set; }
        public virtual DbSet<tbEmpleados> tbEmpleados { get; set; }
        public virtual DbSet<tbEstadosCiviles> tbEstadosCiviles { get; set; }
        public virtual DbSet<tbMarcas> tbMarcas { get; set; }
        public virtual DbSet<tbMetodosPago> tbMetodosPago { get; set; }
        public virtual DbSet<tbModelos> tbModelos { get; set; }
        public virtual DbSet<tbMunicipios> tbMunicipios { get; set; }
        public virtual DbSet<tbPantallas> tbPantallas { get; set; }
        public virtual DbSet<tbPantallasPorRoles> tbPantallasPorRoles { get; set; }
        public virtual DbSet<tbProveedores> tbProveedores { get; set; }
        public virtual DbSet<tbRepuestos> tbRepuestos { get; set; }
        public virtual DbSet<tbRoles> tbRoles { get; set; }
        public virtual DbSet<tbServicios> tbServicios { get; set; }
        public virtual DbSet<tbSucursales> tbSucursales { get; set; }
        public virtual DbSet<tbUsuarios> tbUsuarios { get; set; }
        public virtual DbSet<tbVehiculos> tbVehiculos { get; set; }
        public virtual DbSet<tbVentas> tbVentas { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<tbClientePorVehiculo>(entity =>
            {
                entity.HasKey(e => e.clvh_ID)
                    .HasName("PK_clvh_ID_tllr_tbClientePorVehiculo");

                entity.ToTable("tbClientePorVehiculo", "tllr");

                entity.Property(e => e.clvh_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.clvh_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.clvh_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbClientePorVehiculo)
                    .HasForeignKey(d => d.clie_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_clvh_ID_tllr_tbClientePorVehiculo_clie_ID_tbClientes");

                entity.HasOne(d => d.clvh_UserCreacionNavigation)
                    .WithMany(p => p.tbClientePorVehiculoclvh_UserCreacionNavigation)
                    .HasForeignKey(d => d.clvh_UserCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_acce_tbClientePorVehiculo_clvh_UserCreacion");

                entity.HasOne(d => d.clvh_UserModificacionNavigation)
                    .WithMany(p => p.tbClientePorVehiculoclvh_UserModificacionNavigation)
                    .HasForeignKey(d => d.clvh_UserModificacion)
                    .HasConstraintName("FK_tllr_acce_tbClientePorVehiculo_clvh_UserModificacion");

                entity.HasOne(d => d.vehi)
                    .WithMany(p => p.tbClientePorVehiculo)
                    .HasForeignKey(d => d.vehi_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_clvh_ID_tllr_tbClientePorVehiculo_vehi_ID_tbVehiculos");
            });

            modelBuilder.Entity<tbClientes>(entity =>
            {
                entity.HasKey(e => e.clie_ID)
                    .HasName("PK_tllr_tbClientes_clie_ID");

                entity.ToTable("tbClientes", "tllr");

                entity.Property(e => e.clie_Apellidos)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.clie_CorreoElectronico).HasMaxLength(500);

                entity.Property(e => e.clie_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.clie_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.clie_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.clie_FechaNacimiento).HasColumnType("datetime");

                entity.Property(e => e.clie_Nombres)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.clie_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_Telefono).HasMaxLength(20);

                entity.Property(e => e.muni_ID)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.clie_UserCreacionNavigation)
                    .WithMany(p => p.tbClientesclie_UserCreacionNavigation)
                    .HasForeignKey(d => d.clie_UserCreacion)
                    .HasConstraintName("FK_tllr_acce_tbClientes_clie_UserCreacion");

                entity.HasOne(d => d.clie_UserModificacionNavigation)
                    .WithMany(p => p.tbClientesclie_UserModificacionNavigation)
                    .HasForeignKey(d => d.clie_UserModificacion)
                    .HasConstraintName("FK_tllr_acce_tbClientes_clie_UserModificacion");

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbClientes)
                    .HasForeignKey(d => d.muni_ID)
                    .HasConstraintName("FK_tllr_gral_tbClientes_muni_ID");
            });

            modelBuilder.Entity<tbCompras>(entity =>
            {
                entity.HasKey(e => e.comp_ID)
                    .HasName("PK_tllr_tbCompras_comp_ID");

                entity.ToTable("tbCompras", "tllr");

                entity.Property(e => e.comp_Descuento).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.comp_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.comp_Fecha).HasColumnType("date");

                entity.Property(e => e.comp_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.comp_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.comp_MontoFinal).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.comp_UserCreacionNavigation)
                    .WithMany(p => p.tbComprascomp_UserCreacionNavigation)
                    .HasForeignKey(d => d.comp_UserCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_acce_tbCompras_comp_UserCreacion");

                entity.HasOne(d => d.comp_UserModificacionNavigation)
                    .WithMany(p => p.tbComprascomp_UserModificacionNavigation)
                    .HasForeignKey(d => d.comp_UserModificacion)
                    .HasConstraintName("FK_tllr_acce_tbCompras_comp_UserModificacion");

                entity.HasOne(d => d.prov)
                    .WithMany(p => p.tbCompras)
                    .HasForeignKey(d => d.prov_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_tbCompras_tllr_tbProveedores_prov_ID");
            });

            modelBuilder.Entity<tbDepartamentos>(entity =>
            {
                entity.HasKey(e => e.depa_ID)
                    .HasName("PK_gral_tbDepartamentos_depa_ID");

                entity.ToTable("tbDepartamentos", "gral");

                entity.Property(e => e.depa_ID)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.depa_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.depa_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.depa_UserCreacionNavigation)
                    .WithMany(p => p.tbDepartamentosdepa_UserCreacionNavigation)
                    .HasForeignKey(d => d.depa_UserCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbDepartamentos_acce_tbUsuarios_depa_UserCreacion_user_ID");

                entity.HasOne(d => d.depa_UserModificacionNavigation)
                    .WithMany(p => p.tbDepartamentosdepa_UserModificacionNavigation)
                    .HasForeignKey(d => d.depa_UserModificacion)
                    .HasConstraintName("FK_gral_tbDepartamentos_acce_tbUsuarios_depa_UserModificacion_user_ID");
            });

            modelBuilder.Entity<tbDetallesCompras>(entity =>
            {
                entity.HasKey(e => e.deco_ID)
                    .HasName("PK_tllr_tbDetallesCompras_deco_ID");

                entity.ToTable("tbDetallesCompras", "tllr");

                entity.Property(e => e.deco_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.deco_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.deco_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.deco_MontoTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.deco_Preciocompra).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.comp)
                    .WithMany(p => p.tbDetallesCompras)
                    .HasForeignKey(d => d.comp_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_tbDetallesCompras_comp_ID_tllr_tbCompras_comp_ID");

                entity.HasOne(d => d.deco_UserCreacionNavigation)
                    .WithMany(p => p.tbDetallesComprasdeco_UserCreacionNavigation)
                    .HasForeignKey(d => d.deco_UserCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_acce_tbDetallesCompras_deco_UserCreacion");

                entity.HasOne(d => d.deco_UserModificacionNavigation)
                    .WithMany(p => p.tbDetallesComprasdeco_UserModificacionNavigation)
                    .HasForeignKey(d => d.deco_UserModificacion)
                    .HasConstraintName("FK_tllr_acce_tbDetallesCompras_deco_UserModificacion");

                entity.HasOne(d => d.resp)
                    .WithMany(p => p.tbDetallesCompras)
                    .HasForeignKey(d => d.resp_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_tbDetallesCompras_resp_ID_tllr_tbCompras_resp_ID");
            });

            modelBuilder.Entity<tbDetallesventas>(entity =>
            {
                entity.HasKey(e => e.deve_ID)
                    .HasName("PK_tllr_tbDetallesventas_deve_ID");

                entity.ToTable("tbDetallesventas", "tllr");

                entity.Property(e => e.deve_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.deve_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.deve_Precioventa).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.deve_UserCreacionNavigation)
                    .WithMany(p => p.tbDetallesventasdeve_UserCreacionNavigation)
                    .HasForeignKey(d => d.deve_UserCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_tbDetallesventas_vehi_UserCreacion");

                entity.HasOne(d => d.deve_UserModificacionNavigation)
                    .WithMany(p => p.tbDetallesventasdeve_UserModificacionNavigation)
                    .HasForeignKey(d => d.deve_UserModificacion)
                    .HasConstraintName("FK_tllr_tbDetallesventas_vehi_UserModificacion");

                entity.HasOne(d => d.resp)
                    .WithMany(p => p.tbDetallesventas)
                    .HasForeignKey(d => d.resp_ID)
                    .HasConstraintName("FK_tllr_tbDetallesventas_resp_ID_tllr_tbVentas_resp_ID");

                entity.HasOne(d => d.serv)
                    .WithMany(p => p.tbDetallesventas)
                    .HasForeignKey(d => d.serv_ID)
                    .HasConstraintName("FK_tllr_tbDetallesventas_serv_ID_tllr_tbServicios_serv_ID");

                entity.HasOne(d => d.vehi)
                    .WithMany(p => p.tbDetallesventas)
                    .HasForeignKey(d => d.vehi_ID)
                    .HasConstraintName("FK_tllr_tbDetallesventas_vehi_ID");

                entity.HasOne(d => d.vent)
                    .WithMany(p => p.tbDetallesventas)
                    .HasForeignKey(d => d.vent_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_tbDetallesventas_vent_ID_tllr_tbVentas_vent_ID");
            });

            modelBuilder.Entity<tbEmpleados>(entity =>
            {
                entity.HasKey(e => e.empe_Id)
                    .HasName("PK_maqu_tbEmpleados_empe_Id");

                entity.ToTable("tbEmpleados", "tllr");

                entity.Property(e => e.empe_Apellidos)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.empe_CorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_Direccion)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.empe_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.empe_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.empe_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empe_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.empe_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.empe_Nombres)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.empe_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empe_Telefono)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.muni_Id)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.empe_UsuCreacionNavigation)
                    .WithMany(p => p.tbEmpleadosempe_UsuCreacionNavigation)
                    .HasForeignKey(d => d.empe_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbEmpleados_acce_tbUsuarios_UserCreate");

                entity.HasOne(d => d.empe_UsuModificacionNavigation)
                    .WithMany(p => p.tbEmpleadosempe_UsuModificacionNavigation)
                    .HasForeignKey(d => d.empe_UsuModificacion)
                    .HasConstraintName("FK_maqu_tbEmpleados_acce_tbUsuarios_UserUpdate");

                entity.HasOne(d => d.estacivi)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.estacivi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbEmpleados_gral_tbEstadosCiviles_estacivi_Id");

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbEmpleados_gral_tbMunicipios_muni_Id");

                entity.HasOne(d => d.sucu)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.sucu_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbEmpleados_maqu_tbSucursales_sucu_Id");
            });

            modelBuilder.Entity<tbEstadosCiviles>(entity =>
            {
                entity.HasKey(e => e.estacivi_ID)
                    .HasName("PK_gral_tbEstadosCiviles");

                entity.ToTable("tbEstadosCiviles", "gral");

                entity.Property(e => e.estacivi_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.estacivi_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.estacivi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.estacivi_Nombre).HasMaxLength(50);

                entity.HasOne(d => d.estacivi_UserCreacionNavigation)
                    .WithMany(p => p.tbEstadosCivilesestacivi_UserCreacionNavigation)
                    .HasForeignKey(d => d.estacivi_UserCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbEstadosCiviles_acce_tbUsuarios_estacivi_UserCreacion_user_ID");

                entity.HasOne(d => d.estacivi_UserModificacionNavigation)
                    .WithMany(p => p.tbEstadosCivilesestacivi_UserModificacionNavigation)
                    .HasForeignKey(d => d.estacivi_UserModificacion)
                    .HasConstraintName("FK_gral_tbEstadosCiviles_acce_tbUsuarios_estacivi_UserModificacion_user_ID");
            });

            modelBuilder.Entity<tbMarcas>(entity =>
            {
                entity.HasKey(e => e.marc_ID)
                    .HasName("PK_tllr_tbMarcas_marc_ID");

                entity.ToTable("tbMarcas", "tllr");

                entity.Property(e => e.marc_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.marc_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.marc_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.marc_Nombre)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.marc_UserCreacionNavigation)
                    .WithMany(p => p.tbMarcasmarc_UserCreacionNavigation)
                    .HasForeignKey(d => d.marc_UserCreacion)
                    .HasConstraintName("FK_tllr_acce_tbMarcas_marc_UserCreacion");

                entity.HasOne(d => d.marc_UserModificacionNavigation)
                    .WithMany(p => p.tbMarcasmarc_UserModificacionNavigation)
                    .HasForeignKey(d => d.marc_UserModificacion)
                    .HasConstraintName("FK_tllr_acce_tbMarcas_marc_UserModificacion");
            });

            modelBuilder.Entity<tbMetodosPago>(entity =>
            {
                entity.HasKey(e => e.meto_ID)
                    .HasName("PK_tllr_tbMetodosPago_meto_ID");

                entity.ToTable("tbMetodosPago", "gral");

                entity.Property(e => e.meto_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.meto_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.meto_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.meto_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.meto_UserCreacionNavigation)
                    .WithMany(p => p.tbMetodosPagometo_UserCreacionNavigation)
                    .HasForeignKey(d => d.meto_UserCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_tbMetodosPago_acce_tbUsuarios_meto_UserCreacion_user_ID");

                entity.HasOne(d => d.meto_UserModificacionNavigation)
                    .WithMany(p => p.tbMetodosPagometo_UserModificacionNavigation)
                    .HasForeignKey(d => d.meto_UserModificacion)
                    .HasConstraintName("FK_tllr_tbMetodosPago_acce_tbUsuarios_meto_UserModificacion_user_ID");
            });

            modelBuilder.Entity<tbModelos>(entity =>
            {
                entity.HasKey(e => e.mode_ID)
                    .HasName("PK_tllr_mode_ID");

                entity.ToTable("tbModelos", "tllr");

                entity.Property(e => e.mode_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.mode_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.mode_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.mode_Nombre)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.marc)
                    .WithMany(p => p.tbModelos)
                    .HasForeignKey(d => d.marc_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_tbModelos_marc_ID");

                entity.HasOne(d => d.mode_UserCreacionNavigation)
                    .WithMany(p => p.tbModelosmode_UserCreacionNavigation)
                    .HasForeignKey(d => d.mode_UserCreacion)
                    .HasConstraintName("FK_tllr_acce_mode_UserCreacion");

                entity.HasOne(d => d.mode_UserModificacionNavigation)
                    .WithMany(p => p.tbModelosmode_UserModificacionNavigation)
                    .HasForeignKey(d => d.mode_UserModificacion)
                    .HasConstraintName("FK_tllr_acce_mode_UserModificacion");
            });

            modelBuilder.Entity<tbMunicipios>(entity =>
            {
                entity.HasKey(e => e.muni_ID)
                    .HasName("PK_gral_tbMunicipios_muni_ID");

                entity.ToTable("tbMunicipios", "gral");

                entity.Property(e => e.muni_ID)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_ID)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.muni_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.muni_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.HasOne(d => d.depa)
                    .WithMany(p => p.tbMunicipios)
                    .HasForeignKey(d => d.depa_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbMunicipios_gral_tbDepartamentos_depa_ID");

                entity.HasOne(d => d.muni_UserCreacionNavigation)
                    .WithMany(p => p.tbMunicipiosmuni_UserCreacionNavigation)
                    .HasForeignKey(d => d.muni_UserCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbMunicipios_acce_tbUsuarios_muni_UserCreacion_user_ID");

                entity.HasOne(d => d.muni_UserModificacionNavigation)
                    .WithMany(p => p.tbMunicipiosmuni_UserModificacionNavigation)
                    .HasForeignKey(d => d.muni_UserModificacion)
                    .HasConstraintName("FK_gral_tbMunicipios_acce_tbUsuarios_muni_UserModificacion_user_ID");
            });

            modelBuilder.Entity<tbPantallas>(entity =>
            {
                entity.HasKey(e => e.pant_ID)
                    .HasName("PK_acce_tbPantallas_pant_ID");

                entity.ToTable("tbPantallas", "acce");

                entity.Property(e => e.pant_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.pant_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pant_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pant_HtmlID)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.pant_Menu)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.pant_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.pant_Url)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbPantallasPorRoles>(entity =>
            {
                entity.HasKey(e => e.pantrole_ID)
                    .HasName("PK_acce_tbPantallasPorRoles_pantrole_ID");

                entity.ToTable("tbPantallasPorRoles", "acce");

                entity.Property(e => e.pantrole_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.pantrole_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pantrole_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.pant)
                    .WithMany(p => p.tbPantallasPorRoles)
                    .HasForeignKey(d => d.pant_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbPantallas_pant_ID");

                entity.HasOne(d => d.pantrole_UserCreacionNavigation)
                    .WithMany(p => p.tbPantallasPorRolespantrole_UserCreacionNavigation)
                    .HasForeignKey(d => d.pantrole_UserCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbUsuarios_pantrole_UserCreacion_user_ID");

                entity.HasOne(d => d.pantrole_UserModificacionNavigation)
                    .WithMany(p => p.tbPantallasPorRolespantrole_UserModificacionNavigation)
                    .HasForeignKey(d => d.pantrole_UserModificacion)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbUsuarios_pantrole_UserModificacion_user_ID");

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbPantallasPorRoles)
                    .HasForeignKey(d => d.role_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbRoles_role_ID");
            });

            modelBuilder.Entity<tbProveedores>(entity =>
            {
                entity.HasKey(e => e.prov_ID)
                    .HasName("PK_tllr_tbProveedores_prov_ID");

                entity.ToTable("tbProveedores", "tllr");

                entity.Property(e => e.prov_CorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.prov_Dirrecion)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.prov_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.prov_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.prov_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.prov_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.prov_Rut)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.prov_Telefono)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.HasOne(d => d.prov_UserCreacionNavigation)
                    .WithMany(p => p.tbProveedoresprov_UserCreacionNavigation)
                    .HasForeignKey(d => d.prov_UserCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_tbProveedores_acce_tbUsuarios_prov_UserCreacion_user_ID");

                entity.HasOne(d => d.prov_UserModificacionNavigation)
                    .WithMany(p => p.tbProveedoresprov_UserModificacionNavigation)
                    .HasForeignKey(d => d.prov_UserModificacion)
                    .HasConstraintName("FK_tllr_tbProveedores_acce_tbUsuarios_prov_UserModificacion_user_ID");
            });

            modelBuilder.Entity<tbRepuestos>(entity =>
            {
                entity.HasKey(e => e.resp_ID)
                    .HasName("PK_tllr_tbRepuestos_resp_ID");

                entity.ToTable("tbRepuestos", "tllr");

                entity.Property(e => e.resp_Anio)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.resp_Descripcion)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.resp_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.resp_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.resp_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.resp_Precio).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.marc)
                    .WithMany(p => p.tbRepuestos)
                    .HasForeignKey(d => d.marc_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_tRepuestos_marc_ID_tllr_tbMarcas");

                entity.HasOne(d => d.prov)
                    .WithMany(p => p.tbRepuestos)
                    .HasForeignKey(d => d.prov_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_tRepuestos_prov_ID_tllr_tbProveedores");

                entity.HasOne(d => d.resp_UserCreacionNavigation)
                    .WithMany(p => p.tbRepuestosresp_UserCreacionNavigation)
                    .HasForeignKey(d => d.resp_UserCreacion)
                    .HasConstraintName("FK_tllr_acce_tbRepuestos_resp_UserCreacion");

                entity.HasOne(d => d.resp_UserModificacionNavigation)
                    .WithMany(p => p.tbRepuestosresp_UserModificacionNavigation)
                    .HasForeignKey(d => d.resp_UserModificacion)
                    .HasConstraintName("FK_tllr_acce_tbRepuestos_resp_UserModificacion");
            });

            modelBuilder.Entity<tbRoles>(entity =>
            {
                entity.HasKey(e => e.role_ID)
                    .HasName("PK_acce_tbRoles_role_ID");

                entity.ToTable("tbRoles", "acce");

                entity.Property(e => e.role_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.role_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.role_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.role_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.role_UserCreacionNavigation)
                    .WithMany(p => p.tbRolesrole_UserCreacionNavigation)
                    .HasForeignKey(d => d.role_UserCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbRoles_acce_tbUsuarios_role_UserCreacion_user_ID");

                entity.HasOne(d => d.role_UserModificacionNavigation)
                    .WithMany(p => p.tbRolesrole_UserModificacionNavigation)
                    .HasForeignKey(d => d.role_UserModificacion)
                    .HasConstraintName("FK_acce_tbRoles_acce_tbUsuarios_role_UserModificacion_user_ID");
            });

            modelBuilder.Entity<tbServicios>(entity =>
            {
                entity.HasKey(e => e.serv_ID)
                    .HasName("PK_serv_ID_tllr_tbServicios");

                entity.ToTable("tbServicios", "tllr");

                entity.Property(e => e.serv_Descripcion).HasMaxLength(250);

                entity.Property(e => e.serv_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.serv_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.serv_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.serv_Precio).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.serv_UserCreacionNavigation)
                    .WithMany(p => p.tbServiciosserv_UserCreacionNavigation)
                    .HasForeignKey(d => d.serv_UserCreacion)
                    .HasConstraintName("FK_tllr_acce_tbServicios_serv_UserCreacion");

                entity.HasOne(d => d.serv_UserModificacionNavigation)
                    .WithMany(p => p.tbServiciosserv_UserModificacionNavigation)
                    .HasForeignKey(d => d.serv_UserModificacion)
                    .HasConstraintName("FK_tllr_acce_tbServicios_serv_UserModificacion");
            });

            modelBuilder.Entity<tbSucursales>(entity =>
            {
                entity.HasKey(e => e.sucu_ID)
                    .HasName("PK_tllr_tbSucursales_sucu_ID");

                entity.ToTable("tbSucursales", "tllr");

                entity.Property(e => e.muni_ID)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sucu_Descripcion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.sucu_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.sucu_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.sucu_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sucu_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbSucursales)
                    .HasForeignKey(d => d.muni_ID)
                    .HasConstraintName("FK_tllr_gral_tbSucursales_muni_ID");

                entity.HasOne(d => d.sucu_UserCreacionNavigation)
                    .WithMany(p => p.tbSucursalessucu_UserCreacionNavigation)
                    .HasForeignKey(d => d.sucu_UserCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_acce_tbSucursales_sucu_UserCreacion");

                entity.HasOne(d => d.sucu_UserModificacionNavigation)
                    .WithMany(p => p.tbSucursalessucu_UserModificacionNavigation)
                    .HasForeignKey(d => d.sucu_UserModificacion)
                    .HasConstraintName("FK_tllr_acce_tbSucursales_sucu_UserModificacion");
            });

            modelBuilder.Entity<tbUsuarios>(entity =>
            {
                entity.HasKey(e => e.user_ID)
                    .HasName("PK_acce_tbUsuarios_user_ID");

                entity.ToTable("tbUsuarios", "acce");

                entity.Property(e => e.user_Contrasena).IsRequired();

                entity.Property(e => e.user_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.user_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.user_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.user_NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.role_ID)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbRoles_role_ID");

                entity.HasOne(d => d.user_UserCreacionNavigation)
                    .WithMany(p => p.Inverseuser_UserCreacionNavigation)
                    .HasForeignKey(d => d.user_UserCreacion)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbUsuarios_user_UserCreacion_user_ID");

                entity.HasOne(d => d.user_UserModificacionNavigation)
                    .WithMany(p => p.Inverseuser_UserModificacionNavigation)
                    .HasForeignKey(d => d.user_UserModificacion)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbUsuarios_user_UserModificacion_user_ID");
            });

            modelBuilder.Entity<tbVehiculos>(entity =>
            {
                entity.HasKey(e => e.vehi_ID)
                    .HasName("PK_tllr_tbVehiculos_vehi_ID");

                entity.ToTable("tbVehiculos", "tllr");

                entity.Property(e => e.vehi_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.vehi_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.vehi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.vehi_Matricula)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.vehi_anio)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.HasOne(d => d.mode)
                    .WithMany(p => p.tbVehiculos)
                    .HasForeignKey(d => d.mode_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_tbVehiculos_mode_ID");

                entity.HasOne(d => d.vehi_UserCreacionNavigation)
                    .WithMany(p => p.tbVehiculosvehi_UserCreacionNavigation)
                    .HasForeignKey(d => d.vehi_UserCreacion)
                    .HasConstraintName("FK_tllr_acce_tbVehiculos_vehi_UserCreacion");

                entity.HasOne(d => d.vehi_UserModificacionNavigation)
                    .WithMany(p => p.tbVehiculosvehi_UserModificacionNavigation)
                    .HasForeignKey(d => d.vehi_UserModificacion)
                    .HasConstraintName("FK_tllr_acce_tbVehiculos_vehi_UserModificacion");
            });

            modelBuilder.Entity<tbVentas>(entity =>
            {
                entity.HasKey(e => e.vent_Id)
                    .HasName("PK_tllr_tbVentas_vent_Id");

                entity.ToTable("tbVentas", "tllr");

                entity.Property(e => e.vent_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.vent_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbVentas)
                    .HasForeignKey(d => d.clie_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_tbVentas_clie_Id_ABRR_tbClientes_clie_Id");

                entity.HasOne(d => d.meto)
                    .WithMany(p => p.tbVentas)
                    .HasForeignKey(d => d.meto_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_tbVentas_meto_ID");

                entity.HasOne(d => d.sucu)
                    .WithMany(p => p.tbVentas)
                    .HasForeignKey(d => d.sucu_ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_tbVentas_sucu_Id_ABRR_tbSucursales_sucu_Id");

                entity.HasOne(d => d.vent_UserCreacionNavigation)
                    .WithMany(p => p.tbVentasvent_UserCreacionNavigation)
                    .HasForeignKey(d => d.vent_UserCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tllr_acce_tbVentas_vent_UserCreacion");

                entity.HasOne(d => d.vent_UserModificacionNavigation)
                    .WithMany(p => p.tbVentasvent_UserModificacionNavigation)
                    .HasForeignKey(d => d.vent_UserModificacion)
                    .HasConstraintName("FK_tllr_acce_tbVentas_vent_UserModificacion");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}